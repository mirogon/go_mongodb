// Code generated by MockGen. DO NOT EDIT.
// Source: mongodbcollection.go

// Package mock_go_mongodb is a generated GoMock package.
package mock_go_mongodb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockMongoDbCollection is a mock of MongoDbCollection interface.
type MockMongoDbCollection struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDbCollectionMockRecorder
}

// MockMongoDbCollectionMockRecorder is the mock recorder for MockMongoDbCollection.
type MockMongoDbCollectionMockRecorder struct {
	mock *MockMongoDbCollection
}

// NewMockMongoDbCollection creates a new mock instance.
func NewMockMongoDbCollection(ctrl *gomock.Controller) *MockMongoDbCollection {
	mock := &MockMongoDbCollection{ctrl: ctrl}
	mock.recorder = &MockMongoDbCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDbCollection) EXPECT() *MockMongoDbCollectionMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockMongoDbCollection) Count(filter interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockMongoDbCollectionMockRecorder) Count(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockMongoDbCollection)(nil).Count), filter)
}

// DeleteAll mocks base method.
func (m *MockMongoDbCollection) DeleteAll(filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockMongoDbCollectionMockRecorder) DeleteAll(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockMongoDbCollection)(nil).DeleteAll), filter)
}

// DeleteOne mocks base method.
func (m *MockMongoDbCollection) DeleteOne(filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockMongoDbCollectionMockRecorder) DeleteOne(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockMongoDbCollection)(nil).DeleteOne), filter)
}

// Distinct mocks base method.
func (m *MockMongoDbCollection) Distinct(fieldName string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distinct", fieldName)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Distinct indicates an expected call of Distinct.
func (mr *MockMongoDbCollectionMockRecorder) Distinct(fieldName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockMongoDbCollection)(nil).Distinct), fieldName)
}

// Find mocks base method.
func (m *MockMongoDbCollection) Find(filter interface{}, opts *options.FindOptions) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", filter, opts)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMongoDbCollectionMockRecorder) Find(filter, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMongoDbCollection)(nil).Find), filter, opts)
}

// FindAll mocks base method.
func (m *MockMongoDbCollection) FindAll(filter interface{}) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", filter)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMongoDbCollectionMockRecorder) FindAll(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMongoDbCollection)(nil).FindAll), filter)
}

// FindOne mocks base method.
func (m *MockMongoDbCollection) FindOne(filter interface{}, opts ...*options.FindOneOptions) (*mongo.SingleResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(*mongo.SingleResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoDbCollectionMockRecorder) FindOne(filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoDbCollection)(nil).FindOne), varargs...)
}

// InsertOne mocks base method.
func (m *MockMongoDbCollection) InsertOne(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoDbCollectionMockRecorder) InsertOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoDbCollection)(nil).InsertOne), arg0)
}

// ReplaceOne mocks base method.
func (m *MockMongoDbCollection) ReplaceOne(filter, replacement interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOne", filter, replacement)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceOne indicates an expected call of ReplaceOne.
func (mr *MockMongoDbCollectionMockRecorder) ReplaceOne(filter, replacement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOne", reflect.TypeOf((*MockMongoDbCollection)(nil).ReplaceOne), filter, replacement)
}

// UpsertOne mocks base method.
func (m *MockMongoDbCollection) UpsertOne(filter, replacement interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOne", filter, replacement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOne indicates an expected call of UpsertOne.
func (mr *MockMongoDbCollectionMockRecorder) UpsertOne(filter, replacement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockMongoDbCollection)(nil).UpsertOne), filter, replacement)
}
