// Code generated by MockGen. DO NOT EDIT.
// Source: mongodbconnector.go

// Package mock_go_mongodb is a generated GoMock package.
package mock_go_mongodb

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockMongoDbConnector is a mock of MongoDbConnector interface.
type MockMongoDbConnector struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDbConnectorMockRecorder
}

// MockMongoDbConnectorMockRecorder is the mock recorder for MockMongoDbConnector.
type MockMongoDbConnectorMockRecorder struct {
	mock *MockMongoDbConnector
}

// NewMockMongoDbConnector creates a new mock instance.
func NewMockMongoDbConnector(ctrl *gomock.Controller) *MockMongoDbConnector {
	mock := &MockMongoDbConnector{ctrl: ctrl}
	mock.recorder = &MockMongoDbConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDbConnector) EXPECT() *MockMongoDbConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockMongoDbConnector) Connect(arg0 *options.ClientOptions) (*mongo.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(*mongo.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockMongoDbConnectorMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoDbConnector)(nil).Connect), arg0)
}
